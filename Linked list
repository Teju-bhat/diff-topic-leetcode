BAsic IMPlementations
  class Node{
    int data;
    Node next;
}
class linked{
    Node head;
    public void insert(int data){
        Node node=new Node();
        node.data=data;
        node.next=null;
        if(head==null)
        {
            head=node;
        }
        else{
            Node n=head;
            while(n.next!=null)
            {
                n=n.next;
            }
            n.next=node;

        }
    }
    public void insertStartAt(int data) {

        Node node = new Node();
        node.data = data;
        node.next = head;
        head = node;
    }
    public void insertAt(int position,int data){
              Node node=new Node();
              node.data=data;
              node.next=null;
              Node n=head;
              for(int i=0;i<position-1;i++){
                 n=n.next;
              }
              node.next=n.next;
              n.next=node;

    }
    public void deleteend(){
        Node n=head;
        Node temp=null;
        while(n.next!=null){
            temp=n;
            n=n.next;
        }
        temp.next=null;
        System.out.println("deleted node"+n.data);
    }
    public void deletefront(){
        Node n=head;
         head=n.next;
         n.next=null;
         System.out.println("deleted node"+n.data);

    }
    public void deleteAt(int position){
        Node n=head;
        Node prev=null;
        Node temp=n.next;
        for(int i=0;i<position;i++){
            prev=n;
            n=n.next;
            temp=temp.next;

        }
        System.out.println("deleted node:"+n.data);
        prev.next=temp;


    }

    public void show()
    {
         Node node=head;
        while(node.next!=null)
        {
            System.out.print(node.data+" ");
             node = node.next;
        }
        System.out.print(node.data);
    }

}
public class linkedlist {
    public static void main(String args[]) {
        linked list = new linked();
        list.insert(0);
        list.insert(1);
        list.insert(3);
        list.insert(4);
        list.insert(5);
      list.insertAt(0,9);
      list.insertStartAt(0);
        list.deleteend();
        list.deletefront();
         list.deleteAt(2);
        list.show();

    }
}
_________________________________________________________________________________




206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/
_____________________________________________________________
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]
______________________________________________________________-
class Solution {
    public ListNode reverseList(ListNode head) {
     
        ListNode prev=null;
        while(head!=null){
            ListNode next=head.next;
            head.next=prev;
            prev=head;
          head=next;
         }
        return prev;
        
                 
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++
876. Middle of the Linked List
https://leetcode.com/problems/middle-of-the-linked-list/
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
_________________________________________________________________________
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
______________________________________________

class Solution {
    public ListNode middleNode(ListNode head) {
        int count=0;
        ListNode n=head;
        int length=0;
        ListNode n1=head;
        while(n!=null){
            count++;
           n=n.next;
        }
        int len=count/2;
        for(int i=0;i<len;i++){
             n1=n1.next;
        }
        return n1; 
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
237. Delete Node in a Linked List
https://leetcode.com/problems/delete-node-in-a-linked-list/
Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.
It is guaranteed that the node to be deleted is not a tail node in the list.
_________________________________________________________
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.

Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.
______________________________________________________________________________________________________________________

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        node.val=node.next.val;
        node.next=node.next.next;
    }
    
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
203. Remove Linked List Elements
https://leetcode.com/problems/remove-linked-list-elements/
Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.
________________________________________________________________________
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []
Example 3:

Input: head = [7,7,7,7], val = 7
Output: []
_______________________________________________________________
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
       
       while(head!=null && head.val==val){
             head=head.next;
       }
      if(head==null){
            return null;
        }
         ListNode prev=null;
         ListNode  curr=head;
          while(curr.next!=null ){
            if(curr.val==val){
              prev.next=curr.next;
                curr=curr.next;
            }
              else
              {
                prev=curr;
                curr=curr.next;
            }
        }
        if(curr.val==val){
            prev.next=null;
        }
        else{
                prev=curr;
                curr=curr.next;
        }
        return head;
        
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/
_____________________________________________________________
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]
______________________________________________________________-
class Solution {
    public ListNode reverseList(ListNode head) {
     
        ListNode prev=null;
        while(head!=null){
            ListNode next=head.next;
            head.next=prev;
            prev=head;
          head=next;
         }
        return prev;
        
                 
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++
876. Middle of the Linked List
https://leetcode.com/problems/middle-of-the-linked-list/
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
_________________________________________________________________________
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
______________________________________________

class Solution {
    public ListNode middleNode(ListNode head) {
        int count=0;
        ListNode n=head;
        int length=0;
        ListNode n1=head;
        while(n!=null){
            count++;
           n=n.next;
        }
        int len=count/2;
        for(int i=0;i<len;i++){
             n1=n1.next;
        }
        return n1; 
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

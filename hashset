1)  Missing number in array   
 Given an array of size N-1 such that it only contains distinct integers in the range of 1 to N. Find the missing element.
Example 1:
_____________________________________
Input:
N = 5
A[] = {1,2,3,5}
Output: 4
Example 2:

Input:
N = 10
A[] = {6,1,2,8,3,4,7,10,5}
Output: 9
______________________________________
class Solution {
    int MissingNumber(int array[], int n) {
    //1st solution
     /*HashSet<Integer> se=new HashSet<>();
      int miss=1;
      for(int i=0;i<array.length;i++){
          se.add(array[i]);
      }
      while(true){
          if(se.contains(miss)){
             miss++;  
          }
          else{
             return miss; 
          }
      }*/// 2nd solution
      Arrays.sort(array);
      int sum=n*(n+1)/2;
      int sum1=0;
      for(int i=0;i<array.length;i++){
          sum1=sum1+array[i];
      }
      return sum-sum1;
      
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2) Find Missing And Repeating 
https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1#
__________________________________________________________________________
Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.
___________________________________________________________________________________

class Solve {
    int[] findTwoElement(int arr[], int n) {
        int [] ans=new int [2];
       HashSet<Integer> se=new HashSet<>();
       for(int i=0;i<arr.length;i++){
            if(se.contains(arr[i])){
                 ans[0]=arr[i];
            }
            else{
                se.add(arr[i]);
            }
       }
       int missing=1;
       while(true){
           if(se.contains(missing)){
               missing++;
           }
           else{
               ans[1]=missing;
               break;
           }
       }
       return ans;
    }}
      
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   3)Remove Duplicates 
   https://practice.geeksforgeeks.org/problems/remove-duplicates3034/1/?page=1&difficulty[]=0&category[]=Strings&curated[]=1&sortBy=submissions
   
   Given a string without spaces, the task is to remove duplicates from it.

Note: The original order of characters must be kept the same. 
________________________________________________________________________
Example 1:

Input: S = "zvvo"
Output: "zvo"
Explanation: Only keep the first
occurrence
Example 2:

Input: S = "gfg"
Output: gf
Explanation: Only keep the first
occurrence
_____________________________________________________________________________
class Solution {
    String removeDups(String S) {
        // code here
        char [] a=S.toCharArray();
        HashSet<Character> se=new HashSet<>();
          String strss = "";
        int i=0;
       while(i<a.length){
            if(se.contains(a[i]))
            {
                 i++;
            }
            else{
                if(se.add(a[i])){
            strss =strss+a[i];
            i++;
        }
            }
        
        }
        return strss;
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4)
